{"ast":null,"code":"var _jsxFileName = \"/Users/yonatanronen/dev/rock-paper/src/components/Game.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { css } from 'emotion';\nimport InitialScreen from '../components/InitialScreen';\nimport ResultsScreen from '../components/ResultsScreen';\nimport rock from \"../images/icon-rock.svg\";\nimport paper from \"../images/icon-paper.svg\";\nimport scissors from \"../images/icon-scissors.svg\";\nconst propTypes = {\n  setScore: PropTypes.func\n};\nconst handTypes = ['Paper', 'Rock', 'Scissors'];\n\nconst Game = ({\n  setScore\n}) => {\n  const [showResult, setShowResult] = React.useState({\n    src: null,\n    color: null,\n    handType: null\n  });\n  const [resultType, setResultType] = React.useState(''); // const [compResultSrc, setCompResultSrc ] = React.useState('');\n\n  const [compResultSrc, setCompResultSrc] = React.useState({\n    ['Paper']: {\n      src: paper\n    },\n    ['Rock']: {\n      src: rock\n    },\n    ['Scissors']: {\n      src: scissors\n    }\n  });\n  const firstUpdate = React.useRef(true);\n  React.useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n\n    const compHand = handTypes[Math.floor(Math.random() * handTypes.length)];\n    const newCompResultSrc = compResultSrc[compHand].src; // setCompResultSrc(newCompResultSrc);\n\n    console.log('newCompResultSrc', newCompResultSrc);\n    console.log('compResultSrc', compResultSrc);\n\n    switch (true) {\n      case compHand === 'Paper' && showResult.handType === 'Paper' || compHand === 'Rock' && showResult.handType === 'Rock' || compHand === 'Scissors' && showResult.handType === 'Scissors':\n        {\n          setResultType('Draw');\n          return;\n        }\n\n      case compHand === 'Paper' && showResult.handType === 'Scissors' || compHand === 'Rock' && showResult.handType === 'Paper' || compHand === 'Scissors' && showResult.handType === 'Rock':\n        {\n          setResultType('You Win!');\n          return;\n        }\n\n      case compHand === 'Paper' && showResult.handType === 'Rock' || compHand === 'Rock' && showResult.handType === 'Scissors' || compHand === 'Scissors' && showResult.handType === 'Paper':\n        {\n          setResultType('You Lose');\n          return;\n        }\n    }\n  }, [showResult]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 3\n    }\n  }, showResult.src ? /*#__PURE__*/React.createElement(ResultsScreen, {\n    showResult: showResult,\n    setShowResult: setShowResult,\n    resultType: resultType,\n    compHand: compResultSrc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(InitialScreen, {\n    setShowResult: setShowResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst styles = {\n  root: css({\n    marginTop: 32\n  })\n};\nGame.propTypes = propTypes;\nexport default Game;","map":{"version":3,"sources":["/Users/yonatanronen/dev/rock-paper/src/components/Game.jsx"],"names":["React","PropTypes","css","InitialScreen","ResultsScreen","propTypes","setScore","func","handTypes","Game","showResult","setShowResult","useState","src","color","handType","resultType","setResultType","compResultSrc","setCompResultSrc","paper","rock","scissors","firstUpdate","useRef","useEffect","current","compHand","Math","floor","random","length","newCompResultSrc","console","log","styles","root","marginTop"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { css } from 'emotion';\nimport InitialScreen from '../components/InitialScreen';\nimport ResultsScreen from '../components/ResultsScreen';\nimport rock from '../images/icon-rock.svg';\nimport paper from '../images/icon-paper.svg';\nimport scissors from '../images/icon-scissors.svg';\n\nconst propTypes = {\n  setScore: PropTypes.func,\n};\n\nconst handTypes = [ 'Paper', 'Rock', 'Scissors' ];\n\nconst Game = ({ setScore }) => {\n\n  const [ showResult, setShowResult ] = React.useState({\n    src: null,\n    color: null,\n    handType: null\n  });\n\n  const [ resultType, setResultType ] = React.useState('');\n\n  // const [compResultSrc, setCompResultSrc ] = React.useState('');\n\n    const [compResultSrc, setCompResultSrc ] = React.useState({\n      ['Paper']: {\n        src: paper\n      },\n      ['Rock']: {\n       src: rock\n      },\n      ['Scissors']: {\n       src: scissors\n      }\n    });\n\n  const firstUpdate = React.useRef(true);\n  React.useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    const compHand = handTypes[ Math.floor(Math.random() * handTypes.length) ];\n\n    const newCompResultSrc = compResultSrc[compHand].src;\n\n    // setCompResultSrc(newCompResultSrc);\n    console.log('newCompResultSrc', newCompResultSrc);\n    console.log('compResultSrc', compResultSrc);\n\n    switch (true) {\n      case (compHand === 'Paper' && showResult.handType === 'Paper') || (compHand === 'Rock' && showResult.handType === 'Rock') || (compHand === 'Scissors' && showResult.handType === 'Scissors') : {\n        setResultType('Draw');\n        return;\n      }\n      case (compHand === 'Paper' && showResult.handType === 'Scissors') || (compHand === 'Rock' && showResult.handType === 'Paper') || (compHand === 'Scissors' && showResult.handType === 'Rock') : {\n        setResultType('You Win!');\n        return;\n      }\n      case (compHand === 'Paper' && showResult.handType === 'Rock') || (compHand === 'Rock' && showResult.handType === 'Scissors') || (compHand === 'Scissors' && showResult.handType === 'Paper') : {\n        setResultType('You Lose');\n        return;\n      }\n    }\n  }, [ showResult ]);\n\nreturn (\n  <div className={styles.root}>\n    {\n      showResult.src ?\n        <ResultsScreen showResult={showResult}\n                       setShowResult={setShowResult}\n                       resultType={resultType}\n                       compHand={compResultSrc}/>\n        :\n        <InitialScreen setShowResult={setShowResult}/>\n    }\n  </div>\n);\n}\n;\n\nconst styles = {\n  root: css({\n    marginTop: 32,\n  })\n};\n\nGame.propTypes = propTypes;\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}
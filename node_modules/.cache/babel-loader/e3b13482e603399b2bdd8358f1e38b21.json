{"ast":null,"code":"var _jsxFileName = \"/Users/yonatanronen/dev/rock-paper/src/components/ResultsScreen.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { css } from 'emotion';\nimport Button from '@material-ui/core/Button';\nconst propTypes = {\n  showResult: PropTypes.object,\n  setShowResult: PropTypes.func,\n  resultType: PropTypes.string\n};\n\nconst ResultsScreen = ({\n  showResult,\n  setShowResult,\n  resultType\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    classes: {\n      root: styles.button({\n        color: showResult.color\n      })\n    },\n    variant: \"contained\",\n    startIcon: /*#__PURE__*/React.createElement(\"img\", {\n      src: showResult.src,\n      alt: \"hand\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 20\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.flexCol,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.resultText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, \" \", resultType, \" \"), \"s\", /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setShowResult({\n      src: null,\n      color: null\n    }),\n    classes: {\n      root: styles.buttonRestart\n    },\n    variant: \"contained\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, \" Play Again\")), \"s\");\n};\n\nconst styles = {\n  root: css({\n    width: '100%'\n  }),\n  button: ({\n    color,\n    withDisplayBlock,\n    withMarginRight\n  }) => css({\n    '&.MuiButton-root': {\n      width: 200,\n      height: 200,\n      borderRadius: '50%',\n      display: withDisplayBlock ? 'block' : 'inline',\n      backgroundColor: 'white',\n      border: `20px solid ${color}`,\n      margin: 'auto',\n      marginRight: withMarginRight ? 24 : 'auto'\n    }\n  }),\n  buttonRestart: css({\n    '&.MuiButton-root': {\n      width: 100,\n      height: 40,\n      borderRadius: 8,\n      backgroundColor: 'white',\n      color: 'black'\n    }\n  }),\n  flexCol: css({\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }),\n  resultText: css({\n    color: 'white',\n    fontSize: 32,\n    textTransform: 'uppercase'\n  })\n};\nResultsScreen.propTypes = propTypes;\nexport default ResultsScreen;","map":{"version":3,"sources":["/Users/yonatanronen/dev/rock-paper/src/components/ResultsScreen.jsx"],"names":["React","PropTypes","css","Button","propTypes","showResult","object","setShowResult","func","resultType","string","ResultsScreen","styles","root","button","color","src","flexCol","resultText","buttonRestart","width","withDisplayBlock","withMarginRight","height","borderRadius","display","backgroundColor","border","margin","marginRight","flexDirection","alignItems","justifyContent","fontSize","textTransform"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { css } from 'emotion';\nimport Button from '@material-ui/core/Button';\n\nconst propTypes = {\n  showResult: PropTypes.object,\n  setShowResult: PropTypes.func,\n  resultType: PropTypes.string,\n};\n\nconst ResultsScreen = ({ showResult, setShowResult, resultType }) => {\n  return (\n    <div className={styles.root}>\n      {/*<OwnHand showResult={showResult} />*/}\n      <Button\n        classes={{\n          root: styles.button({\n            color: showResult.color,\n          })\n        }}\n        variant=\"contained\"\n        startIcon={<img src={showResult.src} alt='hand'/>}\n      />\n      <div className={styles.flexCol}>\n        <span className={styles.resultText}> {resultType} </span>s\n        <Button\n          onClick={() => setShowResult({\n            src: null,\n            color: null\n          })}\n          classes={{\n            root: styles.buttonRestart\n          }}\n          variant=\"contained\"\n        > Play Again\n        </Button>\n      </div>s\n    </div>\n  );\n};\n\nconst styles = {\n  root: css({\n    width: '100%'\n  }),\n  button: ({ color, withDisplayBlock, withMarginRight }) => css({\n    '&.MuiButton-root': {\n      width: 200,\n      height: 200,\n      borderRadius: '50%',\n      display: withDisplayBlock ? 'block' : 'inline',\n      backgroundColor: 'white',\n      border: `20px solid ${color}`,\n      margin: 'auto',\n      marginRight: withMarginRight ? 24 : 'auto'\n    }\n  }),\n  buttonRestart: css({\n    '&.MuiButton-root': {\n      width: 100,\n      height: 40,\n      borderRadius: 8,\n      backgroundColor: 'white',\n      color: 'black'\n    }\n  }),\n  flexCol: css({\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }),\n  resultText: css({\n    color: 'white',\n    fontSize: 32,\n    textTransform: 'uppercase',\n  })\n};\n\nResultsScreen.propTypes = propTypes;\n\nexport default ResultsScreen;\n"]},"metadata":{},"sourceType":"module"}
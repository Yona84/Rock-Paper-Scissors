{"ast":null,"code":"var _jsxFileName = \"/Users/yonatanronen/dev/rock-paper/src/components/Game.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { css } from 'emotion';\nimport InitialScreen from '../components/InitialScreen';\nimport ResultsScreen from '../components/ResultsScreen';\nconst propTypes = {\n  setScore: PropTypes.func\n};\nconst handTypes = ['Paper', 'Rock', 'Scissors'];\n\nconst Game = ({\n  setScore\n}) => {\n  const [showResult, setShowResult] = React.useState({\n    src: null,\n    color: null,\n    handType: null\n  });\n  const firstUpdate = useRef(true);\n  React.useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n\n    const compHand = handTypes[Math.floor(Math.random() * handTypes.length)];\n    console.log('compHand', compHand);\n  }, [showResult]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, showResult.src ? /*#__PURE__*/React.createElement(ResultsScreen, {\n    showResult: showResult,\n    setShowResult: setShowResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(InitialScreen, {\n    setShowResult: setShowResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }));\n};\n\nconst styles = {\n  root: css({\n    marginTop: 32\n  })\n};\nGame.propTypes = propTypes;\nexport default Game;","map":{"version":3,"sources":["/Users/yonatanronen/dev/rock-paper/src/components/Game.jsx"],"names":["React","PropTypes","css","InitialScreen","ResultsScreen","propTypes","setScore","func","handTypes","Game","showResult","setShowResult","useState","src","color","handType","firstUpdate","useRef","useEffect","current","compHand","Math","floor","random","length","console","log","styles","root","marginTop"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,GAAT,QAAoB,SAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,QAAQ,EAAEL,SAAS,CAACM;AADJ,CAAlB;AAIA,MAAMC,SAAS,GAAG,CAAE,OAAF,EAAW,MAAX,EAAmB,UAAnB,CAAlB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEH,EAAAA;AAAF,CAAD,KAAkB;AAE7B,QAAM,CAAEI,UAAF,EAAcC,aAAd,IAAgCX,KAAK,CAACY,QAAN,CAAe;AACnDC,IAAAA,GAAG,EAAE,IAD8C;AAEnDC,IAAAA,KAAK,EAAE,IAF4C;AAGnDC,IAAAA,QAAQ,EAAE;AAHyC,GAAf,CAAtC;AAMA,QAAMC,WAAW,GAAGC,MAAM,CAAC,IAAD,CAA1B;AACAjB,EAAAA,KAAK,CAACkB,SAAN,CAAgB,MAAM;AACpB,QAAIF,WAAW,CAACG,OAAhB,EAAyB;AACvBH,MAAAA,WAAW,CAACG,OAAZ,GAAsB,KAAtB;AACA;AACD;;AACD,UAAMC,QAAQ,GAAGZ,SAAS,CAAEa,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBf,SAAS,CAACgB,MAArC,CAAF,CAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBN,QAAxB;AACD,GAPD,EAOG,CAAEV,UAAF,CAPH;AASA,sBACE;AAAK,IAAA,SAAS,EAAEiB,MAAM,CAACC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIlB,UAAU,CAACG,GAAX,gBACE,oBAAC,aAAD;AAAe,IAAA,UAAU,EAAEH,UAA3B;AACe,IAAA,aAAa,EAAEC,aAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,gBAIE,oBAAC,aAAD;AAAe,IAAA,aAAa,EAAEA,aAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANN,CADF;AAWD,CA7BD;;AA+BA,MAAMgB,MAAM,GAAG;AACbC,EAAAA,IAAI,EAAE1B,GAAG,CAAC;AACR2B,IAAAA,SAAS,EAAE;AADH,GAAD;AADI,CAAf;AAMApB,IAAI,CAACJ,SAAL,GAAiBA,SAAjB;AAEA,eAAeI,IAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { css } from 'emotion';\nimport InitialScreen from '../components/InitialScreen';\nimport ResultsScreen from '../components/ResultsScreen';\n\nconst propTypes = {\n  setScore: PropTypes.func,\n};\n\nconst handTypes = [ 'Paper', 'Rock', 'Scissors' ];\n\nconst Game = ({ setScore }) => {\n\n  const [ showResult, setShowResult ] = React.useState({\n    src: null,\n    color: null,\n    handType: null\n  });\n\n  const firstUpdate = useRef(true);\n  React.useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    const compHand = handTypes[ Math.floor(Math.random() * handTypes.length) ];\n    console.log('compHand', compHand);\n  }, [ showResult ]);\n  \n  return (\n    <div className={styles.root}>\n      {\n        showResult.src ?\n          <ResultsScreen showResult={showResult}\n                         setShowResult={setShowResult}/>\n          :\n          <InitialScreen setShowResult={setShowResult}/>\n      }\n    </div>\n  );\n};\n\nconst styles = {\n  root: css({\n    marginTop: 32\n  })\n};\n\nGame.propTypes = propTypes;\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}